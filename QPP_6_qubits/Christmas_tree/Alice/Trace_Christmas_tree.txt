
Set n, possible number of quantum states = 2**num_of_qubits: 64

backend = AerSimulator(method='statevector')

parameters - Secret key file name: Secret_key_6-qubits_Christmas_tree.txt

parameters - Secret key retrieved from file

parameters - Set bits_in_block = num_of_bits / num_of_perm_in_pad: 756

parameters - Length of key chunks (bits_in_block/num_of_qubits): 126
QPP_param_file: QPP_param_6-qubits_V0_Christmas_tree.json
plaintext_file: Christmas_tree.png
trace: 1
job_trigger: 2000
print_trigger: 2000
draw_circuit: False
do_sampler: True
version: V0

service: None
backend: None
opt_level, optimisation level for transpile: 2
resilience_level: 1

None

n, possible number of quantum states: 64
num_of_bits, classical key length (bit): 2268
bits_in_block: 756
num_of_qubits: 6
num_of_perm_in_pad, number of permutations gates in pad: 3
pad_selection_key_size: 6
file_to_bitstring - Plaintext file Christmas_tree.png is an image saved in the Portable Network Graphic (PNG) format

file_to_bitstring - Length of image in bytes: 12758

file_to_bitstring - First 100 bytes
b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x02Q\x00\x00\x02K\x08\x03\x00\x00\x00\xf0\xef3\x11\x00\x00\x02\xdfPLTE\xff\xff\xff\xef\xef\xef\x00\x00\x00\x00\x06\x00\x00\t\x00\x00\x13\x00\x00\x19\x00\x00\x1c\x00\x00&\x00\x00/\x00\x009\x00\x00B\x00\x00L\x00\x00O\x00\x00R\x00\x00V\x00\x00Y\x00\x00_\x00\x00f\x00\x00i'

file_to_bitstring - Last 100 bytes
b'\xff\xb2\xa0\xa3*\x94\x04\xec\xa9U\xad\t\xfa\xf3\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Z\x82\xff\x0fV\xbds5\xf8w\xd8\xa9\x00\x00\x00\x00IEND\xaeB`\x82'

file_to_bitstring - Length of image in bits padded with '0': 102066

file_to_bitstring - First 192 bits in message, shown grouped by 8 bits
10001001 01010000 01001110 01000111 00001101 00001010 00011010 00001010 00000000 00000000 00000000 00001101 01001001 01001000 01000100 01010010 00000000 00000000 00000010 01010001 00000000 000

file_to_bitstring - Last 192 bits in message, shown grouped by 8 bits
111 00001111 01010110 10111101 01110011 00110101 11111000 01110111 11011000 10101001 00000000 00000000 00000000 00000000 01001001 01000101 01001110 01000100 10101110 01000010 01100000 10000010

permutation_pad

permutation pad - Permutation number: 0, Depth of quantum circuit: 1

permutation_pad - permutation number: 0, dictionary:
{0: '010001', 1: '001110', 2: '011100', 3: '011101', 4: '000100', 5: '010110', 6: '100111', 7: '001001', 8: '000010', 9: '100011', 10: '011110', 11: '101001', 12: '100101', 13: '001101', 14: '101011', 15: '110100', 16: '111010', 17: '001010', 18: '010111', 19: '011010', 20: '001100', 21: '000000', 22: '110101', 23: '110001', 24: '001111', 25: '101110', 26: '100100', 27: '000011', 28: '011011', 29: '110110', 30: '010101', 31: '101000', 32: '010010', 33: '111101', 34: '101010', 35: '100001', 36: '001000', 37: '010000', 38: '111110', 39: '010100', 40: '101111', 41: '110010', 42: '110011', 43: '101100', 44: '111100', 45: '111111', 46: '100110', 47: '101101', 48: '111000', 49: '000101', 50: '000110', 51: '001011', 52: '000001', 53: '011001', 54: '100000', 55: '111001', 56: '011111', 57: '110111', 58: '011000', 59: '100010', 60: '111011', 61: '010011', 62: '000111', 63: '110000'}
permutation pad - Elapsed time: 0:00:00.581806

permutation pad - Permutation number: 1, Depth of quantum circuit: 1

permutation_pad - permutation number: 1, dictionary:
{0: '010011', 1: '000101', 2: '101010', 3: '110011', 4: '110010', 5: '110001', 6: '110000', 7: '111111', 8: '000110', 9: '001000', 10: '100010', 11: '111100', 12: '100011', 13: '001110', 14: '011010', 15: '100000', 16: '010001', 17: '000010', 18: '001100', 19: '010100', 20: '111011', 21: '001011', 22: '101000', 23: '011000', 24: '100101', 25: '010110', 26: '111000', 27: '100001', 28: '011101', 29: '100110', 30: '101101', 31: '001111', 32: '111010', 33: '000000', 34: '100100', 35: '101110', 36: '010101', 37: '000001', 38: '001101', 39: '111001', 40: '101001', 41: '101100', 42: '011111', 43: '110110', 44: '111101', 45: '011011', 46: '000100', 47: '110111', 48: '011001', 49: '110100', 50: '111110', 51: '110101', 52: '101111', 53: '101011', 54: '011110', 55: '000111', 56: '100111', 57: '010010', 58: '010000', 59: '010111', 60: '000011', 61: '001001', 62: '001010', 63: '011100'}
permutation pad - Elapsed time: 0:00:01.161177

permutation pad - Permutation number: 2, Depth of quantum circuit: 1

permutation_pad - permutation number: 2, dictionary:
{0: '000000', 1: '001000', 2: '110010', 3: '010101', 4: '011001', 5: '100110', 6: '010010', 7: '011011', 8: '011000', 9: '111111', 10: '110001', 11: '101010', 12: '101100', 13: '100101', 14: '111010', 15: '110111', 16: '101110', 17: '000111', 18: '011101', 19: '000101', 20: '110000', 21: '000100', 22: '000011', 23: '111100', 24: '011110', 25: '111110', 26: '001100', 27: '001110', 28: '001101', 29: '010000', 30: '011100', 31: '010110', 32: '010100', 33: '111000', 34: '110100', 35: '100010', 36: '111011', 37: '011111', 38: '101001', 39: '000110', 40: '111001', 41: '010111', 42: '001011', 43: '100100', 44: '110110', 45: '101111', 46: '100000', 47: '101011', 48: '100001', 49: '110101', 50: '001010', 51: '100011', 52: '010011', 53: '000010', 54: '001111', 55: '000001', 56: '100111', 57: '101000', 58: '001001', 59: '010001', 60: '110011', 61: '101101', 62: '111101', 63: '011010'}
permutation pad - Elapsed time: 0:00:02.228116
permutation pad - Length of Permutation_Pad: 3

encrypt - Length of message in bits:  102066
encrypt - Length of randomized message:  102066
encrypt - Length of message chunks: 17011
encrypt - Remainder of dividing (Length of message chunks) by (Job trigger): 1011

encrypt - x : 1999,  Permutation_Pad[2], State vector: 111010, Most frequent: 001001
encrypt - Elapsed time: 0:00:00.000681
encrypt - x : 3999,  Permutation_Pad[1], State vector: 110000, Most frequent: 011001
encrypt - Elapsed time: 0:00:00.001272
encrypt - x : 5999,  Permutation_Pad[0], State vector: 110001, Most frequent: 000101
encrypt - Elapsed time: 0:00:00.001819
encrypt - x : 7999,  Permutation_Pad[2], State vector: 000011, Most frequent: 010101
encrypt - Elapsed time: 0:00:00.002378
encrypt - x : 9999,  Permutation_Pad[2], State vector: 101101, Most frequent: 101111
encrypt - Elapsed time: 0:00:00.007962
encrypt - x : 11999,  Permutation_Pad[0], State vector: 001000, Most frequent: 000010
encrypt - Elapsed time: 0:00:00.008601
encrypt - x : 13999,  Permutation_Pad[1], State vector: 000111, Most frequent: 111111
encrypt - Elapsed time: 0:00:00.009128
encrypt - x : 15999,  Permutation_Pad[2], State vector: 100100, Most frequent: 111011
encrypt - Elapsed time: 0:00:00.009657

encrypt - Elapsed time for encryption of message: 0:00:00.009991

encrypt - Length of ciphertext in bits stored into QPP_param.json:  102066

encrypt - First 192 bits in ciphertext string
110110001010100100100000001011000111111100001011110110111001100000001010010000001110000101001101010101011110101001011100000100010010100110100100110110111100010010100011110010100000100011111011
ciphertext_to_binary - Ciphertext file name: ciphertext_Christmas_tree.bin
